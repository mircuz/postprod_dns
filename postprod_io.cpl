<* typedef struct complex {
		double 	real;
		double	imag;
  	} complex; *>

SUBROUTINE read_disk(INTEGER nx_read,ny_read,nz_read)
	<*	int nx= nx_read_+1;	int nz= 2*nz_read_+1;	int ny=ny_read_+3;		int size= size_; 	int rank = rank_; 	int file_reader;
	/*HDF5 APIs definitions*/ 		
    hid_t       file_id, dset_u, dset_v, dset_w;          /* file and dataset identifiers */
    hid_t       filespace, memspace, global_filespace;    /* file and memory dataspace identifiers */
	hid_t		plist_id, plist_id_write;		          /* property list identifier */
	hid_t		filetype, memtype;
    hsize_t     dimsf[3], dim_vect[1];    /* dataset dimensions */
    hsize_t     chunk_dims[3];            /* chunk dimensions */
    hsize_t		count[3];	          	  /* hyperslab selection parameters */
    hsize_t		stride[3];
    hsize_t		block[3];
    hsize_t		offset[3];
    herr_t		file_type, mem_type, file_hyper, mem_hyper, status;
	MPI_Info info  = MPI_INFO_NULL;
	char field_time[25]="/", field_v[25]="", field_eta[25]="", field_u[25]="", field_w[25]="";
	gcvt (time_, 10, field_time);
	strcat(field_v,field_time);		strcat(field_v,"/v");
	strcat(field_eta,field_time);	strcat(field_eta,"/eta");
	char whereami[50];	getcwd(whereami,sizeof(whereami));
	if (rank==0) printf("Extracting field %s/Field.h5/%s\n", whereami,field_time);
	//-------------------------------------------- DATATYPE DEF -----------------------------------------------	
	complex *complex_disk_data = (complex*) malloc(ny*(y_ihi_-y_ilo_+1)*(y_khi_-y_klo_+1)*sizeof(complex));	
	if ( complex_disk_data == NULL) {
		perror(".:Error while allocating complex_disk_data:.\n");	
		abort();
	}	
						
	/*Create FILE Type*/
	filetype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	file_type = H5Tinsert (filetype, "real", HOFFSET (complex, real), H5T_IEEE_F64LE);
	file_type = H5Tinsert (filetype, "imag", HOFFSET (complex, imag), H5T_IEEE_F64LE);

	/*Create MEMORY Type*/
	memtype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	mem_type = H5Tinsert (memtype, "real", HOFFSET (complex, real), H5T_NATIVE_DOUBLE);
	mem_type = H5Tinsert (memtype, "imag", HOFFSET (complex, imag), H5T_NATIVE_DOUBLE);

	//------------------------------------------------ FILE --------------------------------------------------
	/*Set up file access property*/
    plist_id = H5Pcreate(H5P_FILE_ACCESS);
    file_id = H5Fopen("Field.h5", H5F_ACC_RDONLY, plist_id);
    H5Pclose(plist_id);  

    /*Open the FILE dataset*/
	dset_u = H5Dopen(file_id, field_eta, H5P_DEFAULT);
    filespace = H5Dget_space(dset_u);
	//------------------------------------------------ I/O --------------------------------------------------
	/*Create property list for collective dataset write*/
   	file_hyper = H5Dread(dset_u, memtype, H5S_ALL, filespace, H5P_DEFAULT, complex_disk_data);
	file_reader=0;
	for(int i = 0; i < ny*(y_khi_-y_klo_+1)*(y_ihi_-y_ilo_+1); i++) {
		(*(double *)(file_reader*(ssize_t)sizeof(double)+eta_write_)) = complex_disk_data[i].real;		file_reader++;
		(*(double *)(file_reader*(ssize_t)sizeof(double)+eta_write_)) = complex_disk_data[i].imag;		file_reader++;
	}
    /*Close eta resources*/
	H5Sclose(filespace);
	H5Dclose(dset_u);
	
	//=======================================================================================================
	dset_v = H5Dopen(file_id, field_v, H5P_DEFAULT);
	filespace = H5Dget_space(dset_v);

	file_hyper = H5Dread(dset_v, memtype, H5S_ALL, filespace, H5P_DEFAULT, complex_disk_data);
	file_reader=0;
	for(int i = 0; i < ny*(y_khi_-y_klo_+1)*(y_ihi_-y_ilo_+1); i++) {
		(*(double *)(file_reader*(ssize_t)sizeof(double)+v_write_)) = complex_disk_data[i].real;		file_reader++;
		(*(double *)(file_reader*(ssize_t)sizeof(double)+v_write_)) = complex_disk_data[i].imag;		file_reader++;
	} 	
    /*Close U resources*/
	H5Sclose(filespace);
	H5Dclose(dset_v);
	
	/*Release global resources*/
	MPI_Barrier(MPI_COMM_WORLD);
	H5Tclose(filetype);
	H5Fclose(file_id);
	free(complex_disk_data);	*>
	WRITE
	INTEGER counter=0
	LOOP FOR mode_y = jlo TO jhi
		LOOP FOR mode_x = ilo TO ihi
			LOOP FOR mode_z = klo TO khi	
				V(mode_x,mode_z,mode_y).u.REAL = eta_write[counter];	
				V(mode_x,mode_z,mode_y).v.REAL = v_write[counter];		INC counter
				V(mode_x,mode_z,mode_y).u.IMAG = eta_write[counter];	
				V(mode_x,mode_z,mode_y).v.IMAG = v_write[counter];		INC counter 
				!IF rank=1 THEN WRITE "("mode_x","mode_z","mode_y")  " V(mode_x,mode_z,mode_y).v
			REPEAT LOOP
		REPEAT LOOP
	REPEAT LOOP 
<*	MPI_Barrier(MPI_COMM_WORLD); *>
END read_disk 

SUBROUTINE read_mean_flow
	LOOP FOR ix=ilo TO ihi
		LOOP FOR iz=klo TO khi
			IF ix=0 AND iz=0 THEN 
			<*	int nx= nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;	
				char field_time[25]="/", field_u_mean[25]="", field_w_mean[25]="";
				gcvt (time_, 10, field_time);
				strcat(field_u_mean,field_time);		strcat(field_u_mean,"/u_mean");
				strcat(field_w_mean,field_time);		strcat(field_w_mean,"/w_mean");
	
				hid_t file_id, dset_u_mean, dset_w_mean; 
				hid_t plist_id, filespace;
				herr_t reading;
				double mean_u[ny], mean_w[ny];
		

				plist_id = H5Pcreate(H5P_FILE_ACCESS);
				file_id = H5Fopen("Field.h5", H5F_ACC_RDWR, plist_id);

				dset_u_mean = H5Dopen(file_id, field_u_mean, H5P_DEFAULT);
				filespace = H5Dget_space(dset_u_mean);
				reading = H5Dread(dset_u_mean, H5T_IEEE_F64LE, H5S_ALL, filespace, H5P_DEFAULT, mean_u);
				H5Sclose(filespace);
				H5Dclose(dset_u_mean);

				dset_w_mean = H5Dopen(file_id, field_w_mean, H5P_DEFAULT);
				filespace = H5Dget_space(dset_w_mean);
				reading = H5Dread(dset_w_mean, H5T_IEEE_F64LE, H5S_ALL, filespace, H5P_DEFAULT, mean_w);
				H5Sclose(filespace);
				H5Dclose(dset_w_mean);
		
				H5Pclose(plist_id);
				H5Fclose(file_id); 	
				for (int i = 0; i < ny; i++) {
					(*(double *)((i-1)*(ssize_t)sizeof(double)+mean_u_))=mean_u[i];	
					(*(double *)((i-1)*(ssize_t)sizeof(double)+mean_w_))=mean_w[i];	
				}	*>
				LOOP FOR mode_y = jlo TO jhi	
					V(0,0,-1..ny+1).u.REAL = mean_u(-1..ny+1);	
					V(0,0,-1..ny+1).w.REAL = mean_w(-1..ny+1);
					!WRITE "("0","0","mode_y")  " V(0,0,mode_y).u.REAL
				REPEAT LOOP 
			END IF
		REPEAT
	REPEAT
END read_mean_flow

SUBROUTINE setup_file
	<*	int nx= nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;		int size= size_; 	int rank = rank_; 	int mem_reader;
		hid_t plist_id0, file_id0;
		/*Set up file access property list with parallel I/O access*/
   		plist_id0 = H5Pcreate(H5P_FILE_ACCESS);
    	H5Pset_fapl_mpio(plist_id0, MPI_COMM_WORLD, MPI_INFO_NULL);
    	/*Create a new file collectively and release property list identifier*/
    	file_id0 = H5Fcreate("0.h5", H5F_ACC_TRUNC, H5P_DEFAULT, plist_id0);
    	H5Pclose(plist_id0);
		H5Fclose(file_id0); *> 
END setup_file 

SUBROUTINE write_on_disk
	setup_file
	WRITE "The field at " time "s will be the new 0.h5"
	<*	int nx= nx_+1;	int nz= 2*nz_+1;	int ny=ny_+3;	int size= size_; 	int rank = rank_; 	int mem_reader;		double ni = 1/ni_;
	/*HDF5 APIs definitions*/ 		
    hid_t       file_id, dset_u, dset_v, dset_w, dset_eta;/* file and dataset identifiers */
    hid_t       filespace, memspace, global_filespace;    /* file and memory dataspace identifiers */
	hid_t		plist_id, plist_id_write, group_id;	      /* property list identifier */
	hid_t		filetype, memtype;
    hsize_t     dimsf[3], dim_vect[1];    /* dataset dimensions */
    hsize_t     chunk_dims[3];            /* chunk dimensions */
    hsize_t		count[3];	          	  /* hyperslab selection parameters */
    hsize_t		stride[3];
    hsize_t		block[3];
    hsize_t		offset[3];
    herr_t		file_type, mem_type, file_hyper, mem_hyper, status;
	MPI_Info info  = MPI_INFO_NULL;
	char field_time[25]="/", field_v[25]="", field_u[25]="",  field_w[25]="";
	gcvt (0, 10, field_time);
	strcat(field_u,field_time);		strcat(field_u,"/u");	
	strcat(field_v,field_time);		strcat(field_v,"/v");
	strcat(field_w,field_time);		strcat(field_w,"/w");
	//=======================================================================================================
	int dim=3;				
	hsize_t att_dims=dim;		
	double att_modes[dim];
	att_modes[0] = nx;	att_modes[1] = nz;	att_modes[2] = ny;
	//-------------------------------------------- DATATYPE DEF -----------------------------------------------	
	complex *complex_disk_data = (complex*) malloc(nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1)*sizeof(complex));	
	if ( complex_disk_data == NULL) {
		perror(".:Error while allocating complex_disk_data:.\n");	
		abort();
	}	
						
	/*Create FILE Type*/
	filetype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	file_type = H5Tinsert (filetype, "real", HOFFSET (complex, real), H5T_IEEE_F64LE);
	file_type = H5Tinsert (filetype, "imag", HOFFSET (complex, imag), H5T_IEEE_F64LE);

	/*Create MEMORY Type*/
	memtype = H5Tcreate (H5T_COMPOUND, sizeof (complex));
	mem_type = H5Tinsert (memtype, "real", HOFFSET (complex, real), H5T_NATIVE_DOUBLE);
	mem_type = H5Tinsert (memtype, "imag", HOFFSET (complex, imag), H5T_NATIVE_DOUBLE);

	//------------------------------------------------ MEMORY -------------------------------------------------
	/*Create the dataspace for the MEMORY dataset*/
	memspace = H5Screate_simple(1, dim_vect, NULL);
	/*Set MEMORY hyperslab*/    
	offset[0]  = 0;
	stride[0] = 1;
	count[0]  = nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1);
	block[0]  = 1;
	mem_hyper = H5Sselect_hyperslab(memspace, H5S_SELECT_SET, offset, stride, count, block);

  	//------------------------------------------------ FILE --------------------------------------------------
	/*Set up file access property list with parallel I/O access*/
    plist_id = H5Pcreate(H5P_FILE_ACCESS);
    H5Pset_fapl_mpio(plist_id, MPI_COMM_WORLD, info);
    /*Create a new file collectively and release property list identifier*/
    file_id = H5Fopen("0.h5", H5F_ACC_RDWR, plist_id);
    //file_id = H5Fcreate("Field.h5", H5F_ACC_TRUNC, H5P_DEFAULT, plist_id);
    H5Pclose(plist_id);  

	/* Create a group named "time" in the file. */
   	group_id = H5Gcreate2(file_id, field_time, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

    /*Create the dataspace for the FILE dataset*/
    dimsf[0] = ny;	dimsf[1] = nx;	dimsf[2] = nz;			
	global_filespace = H5Screate_simple(3, dimsf, NULL); 	

    /*Create the FILE chunked dataset*/
	chunk_dims[0] = 1;		chunk_dims[1] = 1;		chunk_dims[2] = nz; 
    plist_id = H5Pcreate(H5P_DATASET_CREATE);
    H5Pset_chunk(plist_id, 3, chunk_dims);
	dset_u = H5Dcreate(file_id, field_u, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
    
    /*Set FILE hyperslab in the chunk*/
    filespace = H5Dget_space(dset_u);
	offset[0] = fz_jlo_;	offset[1] = fz_ilo_;	offset[2] = fz_klo_;
	stride[0] = 1; 			stride[1] = 1;			stride[2] = 1;
	count[0]  = fz_jhi_-fz_jlo_+1; 			count[1]  = fz_ihi_-fz_ilo_+1;   		count[2]  = 1; 
	block[0]  = chunk_dims[0]; 		block[1]  = chunk_dims[1];		block[2]  = chunk_dims[2];
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);

	//------------------------------------------------ I/O --------------------------------------------------
	/*Create property list for collective dataset write*/
    plist_id_write = H5Pcreate(H5P_DATASET_XFER);
    H5Pset_dxpl_mpio(plist_id_write, H5FD_MPIO_COLLECTIVE);
  
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+U_t_));
		mem_reader++;
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+U_t_));
		mem_reader++;
	}
   	file_hyper = H5Dwrite(dset_u, memtype, memspace, filespace, plist_id_write, complex_disk_data);

    /*Close U resources*/
	H5Sclose(filespace);
	H5Dclose(dset_u);
    
	//========================================================================================================
	dset_v = H5Dcreate(file_id, field_v, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_v);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+V_t_));
		mem_reader++;
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+V_t_));
		mem_reader++;
	}
    file_hyper = H5Dwrite(dset_v, memtype, memspace, filespace, plist_id_write, complex_disk_data);

	/*Close V resources*/
	H5Sclose(filespace);
	H5Dclose(dset_v);

	//========================================================================================================
	dset_w = H5Dcreate(file_id, field_w, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_w);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+W_t_));
		mem_reader++;		
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+W_t_));
		mem_reader++;
		}
    file_hyper = H5Dwrite(dset_w, memtype, memspace, filespace, plist_id_write, complex_disk_data);

	/*Close W resources*/
	H5Sclose(filespace);
	H5Dclose(dset_w);
	
	//========================================================================================================
/*	dset_eta = H5Dcreate(file_id, field_eta, filetype, global_filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
	filespace = H5Dget_space(dset_eta);
	file_hyper = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, stride, count, block);
	
	mem_reader=0;
	for(int i = 0; i < nz*(fz_jhi_-fz_jlo_+1)*(fz_ihi_-fz_ilo_+1); i++){
		complex_disk_data[i].real = (*(double *)(mem_reader*(ssize_t)sizeof(double)+eta_write_));
		mem_reader++;		
		complex_disk_data[i].imag = (*(double *)(mem_reader*(ssize_t)sizeof(double)+eta_write_));
		mem_reader++;
		}
    file_hyper = H5Dwrite(dset_eta, memtype, memspace, filespace, plist_id_write, complex_disk_data);
*/
	/*Close W resources*/
/*	H5Sclose(filespace);
	H5Dclose(dset_eta);
*/
	/*Dataset Attributes*/
	H5LTset_attribute_double(file_id, field_time, "time", &time_, 1);
	H5LTset_attribute_double(file_id, field_time, "nx nz ny", att_modes, dim);
	H5LTset_attribute_double(file_id, field_time, "alpha0", &alfa0_, 1);
	H5LTset_attribute_double(file_id, field_time, "beta0", &beta0_, 1);
	H5LTset_attribute_double(file_id, field_time, "a", &a_, 1);
	H5LTset_attribute_double(file_id, field_time, "ni", &ni , 1);

	/*Release global resources*/
	MPI_Barrier(MPI_COMM_WORLD);
	H5Pclose(plist_id_write);
	H5Sclose(global_filespace);
	H5Pclose(plist_id);
	H5Gclose(group_id);
	H5Fclose(file_id);
	H5Tclose(filetype);
    H5Sclose(memspace);
	free(complex_disk_data); *>
END write_on_disk
